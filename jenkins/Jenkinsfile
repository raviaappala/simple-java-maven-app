pipeline {
    agent {
        any {
            image 'maven:3-alpine'
            args '-v /root/.m2:/root/.m2'
        }
    }
    tools { 
        maven 'Maven-3.5.4'
        'org.jenkinsci.plugins.docker.commons.tools.DockerTool' 'Docker-18.09' 
    }
    environment {
		DOCKERHUB_CREDENTIALS=credentials('docker')
	}
    stages {
        stage ('Initialize') {
            steps {
                sh '''
                    echo "PATH = ${PATH}"
                    echo "M2_HOME = ${M2_HOME}"
                '''
            }
        }
        stage('Build') {
            steps {
                sh 'mvn -B -DskipTests clean package'
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
        stage('Deliver') {
            steps {
                sh './jenkins/scripts/deliver.sh'
            }
        }
        stage ('Docker_Build') {
            steps {
                sh'''
                    # Build the image
                    docker build . -t sureshrao/k8s-debian-test
                    docker login -u $DOCKERHUB_CREDENTIALS_USR --password $DOCKERHUB_CREDENTIALS_PSW
                    docker push sureshrao/k8s-debian-test:latest
                '''
            }
        }
        stage ('Deploy_K8S') {
             steps {
                     withCredentials([string(credentialsId: "argocd-deploy-role", variable: 'ARGOCD_AUTH_TOKEN')]) {
                        sh '''
                        ARGOCD_SERVER="argocd-server.argocd.svc.cluster.local"
                        APP_NAME="java-maven"
                        CONTAINER="k8s-debian-test"
                        
                        IMAGE_DIGEST=$(docker image inspect sureshrao/\$CONTAINER:latest -f '{{join .RepoDigests ","}}')
                        # Customize image 
                        ARGOCD_SERVER=$ARGOCD_SERVER argocd --insecure --grpc-web app set $APP_NAME --kustomize-image $IMAGE_DIGEST
           
                        # Deploy to ArgoCD
                        ARGOCD_SERVER=$ARGOCD_SERVER argocd --insecure --grpc-web app sync $APP_NAME --force
                        ARGOCD_SERVER=$ARGOCD_SERVER argocd --insecure --grpc-web app wait $APP_NAME --timeout 600
                        '''
               }
            }
        }
    }
}
